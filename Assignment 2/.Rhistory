library(class)
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
Model_range_normalized <- preProcess(Bank,method = "range")
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
#importing data
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
summary(Bank)
Bank$ID <- NULL
Bank$ZIP Code <- NULL
summary(Bank)
install.packages(caret)
library(caret)
install.packages("class")
library(class)
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
install.packages("class")
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
summary(Bank)
Bank$ID <- NULL
Bank$ZIP Code <- NULL
summary(Bank)
install.packages(caret)
library(caret)
install.packages("class")
library(class)
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
#importing data
library('caret')
#importing data
install.packages('caret')
library('caret')
library('ISLR')
library('dplyr')
library('class')
Model_range_normalized <- preProcess(Bank,method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index]
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Predict k value
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Task 2
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Task 3
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD. Account = 0, Online = 1, CreditCard = 1)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
To_Predict_norm = predict(Model_range_norm, To_Predict)
To_Predict_norm = predict(model_range_norm, To_Predict)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Task 3
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
predict(knn.model, To_Predict_norm)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
Model_range_normalized <- preProcess(Bank,method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
View(Bank_norm)
summary(Bank)
Bank$ID <- NULL
Bank$ZIP Code <- NULL
Bank$ZIP.Code <- NULL
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
```{r}
#importing data
install.packages('caret')
library('caret')
library('ISLR')
library('dplyr')
library('class')
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
summary(Bank)
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Task 2
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Task 3
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
install.packages("caret")
install.packages("caret")
install.packages("caret")
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
summary(Bank)
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
#Dummy Variable
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
Model_range_normalized <- preProcess(Bank,method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Task 2
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Task 3
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Task 4
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
confusionMatrix(predictions, validation.df$Personal.Loan)
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
library('caret')
library('ISLR')
library('dplyr')
library('class')
confusionMatr(predictions, validation.df$Personal.Loan)
predictions <- predict(knn.model, validation.df)
confusionMatr(predictions, validation.df$Personal.Loan)
confusionMatrix(predictions, validation.df$Personal.Loan)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Task 5
train_size = 0.5
Train_index = createDataPartition(Bank$Personal.Loan, p = 0.5, list = FALSE)
train.df = Bank_norm[Train_index,]
valid_size = 0.3
validation.df = Bank_norm[-Train_index,]
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = o, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
To_Predict_norm <- predict(Model_range_normalized, Bank[,-8])
Prediction <- knn(train = train.df[,1:7, cl = train.df$Personal.Loan, k = 1])
Prediction <- knn(train = train.df[,1:7, test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1])
Prediction <- knn(train = train.df[,1:7, test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1])
```{r}
#importing data
install.packages('caret')
library('caret')
library('ISLR')
library('dplyr')
library('class')
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
install.packages("caret")
install.packages("caret")
install.packages("caret")
#importing data
install.packages('caret')
install.packages("caret")
install.packages("caret")
#Calling libraries
install.packages('caret')
install.packages('ISLR')
install.packages("caret")
library('caret')
library('ISLR')
library('dplyr')
library('class')
#Importing Data
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
#MakingID and ZIP code as NULL
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
#Normalization
Model_range_normalized <- preProcess(Bank[,-8],method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Question 2 - Finding best value of k
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Question 3 - Confusion matrix from using the best k
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Question 4 - Classify the customer using the best k.
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Question 5
#New split
train_size = 0.5
Train_index = createDataPartition(Bank$Personal.Loan, p = 0.5, list = FALSE)
train.df = Bank_norm[Train_index,]
test_size = 0.2
Test_index = createDataPartition(Bank$Personal.Loan, p = 0.2, list = FALSE)
Test.df = Bank_norm[Test_index,]
valid_size = 0.3
Validation_index = createDataPartition(Bank$Personal.Loan, p = 0.3, list = FALSE)
validation.df = Bank_norm[Validation_index,]
Testknn <- knn(train = train.df[,-8], test = Test.df[,-8], cl = train.df[,8], k =1)
Validationknn <- knn(train = train.df[,-8], test = validation.df[,-8], cl = train.df[,8], k =1)
Trainknn <- knn(train = train.df[,-8], test = train.df[,-8], cl = train.df[,8], k =1)
#Confusion Matrix
confusionMatrix(Testknn, Test.df[,8])
confusionMatrix(Trainknn, train.df[,8])
confusionMatrix(Validationknn, validation.df[,8])
#From the above, comparing confusion matrix of the test set with that of the training and validation sets we can determine
#that a slightly higher training set means that there is no over fitting of data and found the better value of k.
#Calling libraries
library('caret')
library('ISLR')
library('dplyr')
library('class')
#Importing Data
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
#MakingID and ZIP code as NULL
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
#Normalization
Model_range_normalized <- preProcess(Bank[,-8],method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Question 2 - Finding best value of k
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Question 3 - Confusion matrix from using the best k
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Question 4 - Classify the customer using the best k.
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Question 5
#New split
train_size = 0.5
Train_index = createDataPartition(Bank$Personal.Loan, p = 0.5, list = FALSE)
train.df = Bank_norm[Train_index,]
test_size = 0.2
Test_index = createDataPartition(Bank$Personal.Loan, p = 0.2, list = FALSE)
Test.df = Bank_norm[Test_index,]
valid_size = 0.3
Validation_index = createDataPartition(Bank$Personal.Loan, p = 0.3, list = FALSE)
validation.df = Bank_norm[Validation_index,]
Testknn <- knn(train = train.df[,-8], test = Test.df[,-8], cl = train.df[,8], k =1)
Validationknn <- knn(train = train.df[,-8], test = validation.df[,-8], cl = train.df[,8], k =1)
Trainknn <- knn(train = train.df[,-8], test = train.df[,-8], cl = train.df[,8], k =1)
#Confusion Matrix
confusionMatrix(Testknn, Test.df[,8])
confusionMatrix(Trainknn, train.df[,8])
confusionMatrix(Validationknn, validation.df[,8])
#From the above, comparing confusion matrix of the test set with that of the training and validation sets we can determine
#that a slightly higher training set means that there is no over fitting of data and found the better value of k.
```{r setup}
predict(knn.model, To_Predict_norm)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Calling libraries
library('caret')
library('ISLR')
library('dplyr')
library('class')
#Importing Data
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
#MakingID and ZIP code as NULL
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
#Normalization
Model_range_normalized <- preProcess(Bank[,-8],method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Question 2 - Finding best value of k
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Question 3 - Confusion matrix from using the best k
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Question 4 - Classify the customer using the best k.
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Question 5
#New split
train_size = 0.5
Train_index = createDataPartition(Bank$Personal.Loan, p = 0.5, list = FALSE)
train.df = Bank_norm[Train_index,]
test_size = 0.2
Test_index = createDataPartition(Bank$Personal.Loan, p = 0.2, list = FALSE)
Test.df = Bank_norm[Test_index,]
valid_size = 0.3
Validation_index = createDataPartition(Bank$Personal.Loan, p = 0.3, list = FALSE)
validation.df = Bank_norm[Validation_index,]
Testknn <- knn(train = train.df[,-8], test = Test.df[,-8], cl = train.df[,8], k =1)
Validationknn <- knn(train = train.df[,-8], test = validation.df[,-8], cl = train.df[,8], k =1)
Trainknn <- knn(train = train.df[,-8], test = train.df[,-8], cl = train.df[,8], k =1)
#Confusion Matrix
confusionMatrix(Testknn, Test.df[,8])
confusionMatrix(Trainknn, train.df[,8])
confusionMatrix(Validationknn, validation.df[,8])
#From the above, comparing confusion matrix of the test set with that of the training and validation sets we can determine
#that a slightly higher training set means that there is no over fitting of data and found the better value of k.
#Calling libraries
library('caret')
library('ISLR')
library('dplyr')
library('class')
#Importing Data
Bank <- read.csv("C:/Users/Hanish Bhogadi/Downloads/UniversalBank.csv")
#MakingID and ZIP code as NULL
Bank$ID <- NULL
Bank$ZIP.Code <- NULL
summary(Bank)
Bank$Personal.Loan = as.factor(Bank$Personal.Loan)
summary(Bank)
#Normalization
Model_range_normalized <- preProcess(Bank[,-8],method = "range")
Bank_norm <- predict(Model_range_normalized,Bank)
summary(Bank_norm)
View(Bank_norm)
#Data Partition into testing and training sets
Train_index <- createDataPartition(Bank$Personal.Loan, p = 0.6, list = FALSE)
train.df = Bank_norm[Train_index,]
validation.df = Bank_norm[-Train_index,]
#Predict k value
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7], test = To_Predict_norm[,1:7], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
#Question 2 - Finding best value of k
set.seed(123)
Bankcontrol <- trainControl(method = "repeatedcv", number = 3, repeats = 2)
searchGrid = expand.grid(k=1:10)
knn.model = train(Personal.Loan~., data = train.df, method = 'knn', tuneGrid = searchGrid, trControl = Bankcontrol)
knn.model
#Question 3 - Confusion matrix from using the best k
predictions <- predict(knn.model, validation.df)
confusionMatrix(predictions, validation.df$Personal.Loan)
#Question 4 - Classify the customer using the best k.
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
#Question 5
#New split
train_size = 0.5
Train_index = createDataPartition(Bank$Personal.Loan, p = 0.5, list = FALSE)
train.df = Bank_norm[Train_index,]
test_size = 0.2
Test_index = createDataPartition(Bank$Personal.Loan, p = 0.2, list = FALSE)
Test.df = Bank_norm[Test_index,]
valid_size = 0.3
Validation_index = createDataPartition(Bank$Personal.Loan, p = 0.3, list = FALSE)
validation.df = Bank_norm[Validation_index,]
Testknn <- knn(train = train.df[,-8], test = Test.df[,-8], cl = train.df[,8], k =1)
Validationknn <- knn(train = train.df[,-8], test = validation.df[,-8], cl = train.df[,8], k =1)
Trainknn <- knn(train = train.df[,-8], test = train.df[,-8], cl = train.df[,8], k =1)
#Confusion Matrix
confusionMatrix(Testknn, Test.df[,8])
confusionMatrix(Trainknn, train.df[,8])
confusionMatrix(Validationknn, validation.df[,8])
#From the above, comparing confusion matrix of the test set with that of the training and validation sets we can determine
#that a slightly higher training set means that there is no over fitting of data and found the better value of k.
To_Predict = data.frame(Age = 40, Experience = 10, Income = 84, Family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
print(To_Predict)
Prediction <- knn(train = train.df[,1:7,9:12], test = To_Predict_norm[,1:7,9:12], cl = train.df$Personal.Loan, k = 1)
print(Prediction)
To_Predict_norm = data.frame(Age = 40, Experience = 10, Income = 84, family = 2, CCAvg = 2, Education = 1, Mortgage = 0, Securities.Account = 0, CD.Account = 0, Online = 1, CreditCard = 1)
To_Predict_norm = predict(Model_range_normalized, To_Predict)
predict(knn.model, To_Predict_norm)
